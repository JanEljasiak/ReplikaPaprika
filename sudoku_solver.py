"""
Program to solve sudoku game

Author : Jan Eljasiak

Date : March 2022
"""

import time
from termcolor import colored


class Sudoku:
    def __init__(self, board, level = "normal"):
        self.board = board
        self.level = level
        self.empty = []
        for row in range(len(self.board)):
            for col in range(len(self.board)):
                if self.board[row][col] == 0:
                    self.empty.append((row, col))

    def print_board(self) -> None:
        """
        This method prints the board of the sudoku game.
        Every non-zero starting number is red-coloured,
        every digit generated by computer is blue-coloured
        and empty cells are printed as white zeros.
        """
        print('- ' * 13)
        for i in range(3):
            for j in range(3):
                print(end = '| ')
                for k in range(3):
                    for l in range(3):
                        row = 3 * i + j
                        col = 3 * k + l
                        if self.board[row][col] == 0:
                            print(0, end = ' ')
                        elif (row, col) in self.empty:
                            print(colored(str(self.board[row][col]),
                                          color = 'blue'), end = ' ')
                        else:
                            print(colored(str(self.board[row][col]),
                                          color = 'red'), end = ' ')
                    print(end = '| ')
                print()
            print('- ' * 13)

    def is_in_row(self, row: int, number: int) -> bool:
        """
        Given a number of a row and a digit number,
        this method returns True iff the digit is in the given row.
        """
        if number in self.board[row]:
            return True
        return False

    def is_in_column(self, column: int, number: int) -> bool:
        """
        Given a number of a column and a digit number,
        this method returns True iff the digit is in the given column.
        """
        for row in self.board:
            if row[column] == number:
                return True
        return False

    def is_in_square(self, square: tuple, number: int) -> bool:
        """
        Given a 3x3 square represented a pair (row, col) as row, col = 0, 1, 2
        -------------------
        |(0,0)|(1,0)|(2,0)|
        -------------------
        |(0,1)|(1,1)|(2,1)|
        -------------------
        |(0,2)|(1,2)|(2,2)|
        -------------------
        and a digit number,
        this method returns True iff the digit is in the given square.
        """
        for i in range(3):
            for j in range(3):
                if self.board[i + 3 * square[0]][j + 3 * square[1]] == number:
                    return True
        return False

    def is_valid(self, row, column, number) -> bool:
        """
        Given numbers of a row, a column and a digit,
        this method returns True iff the digit is in the row, column or in the same 3x3 square.
        """
        if self.is_in_row(row, number) \
                or self.is_in_column(column, number) \
                or self.is_in_square((row // 3, column // 3), number):
            return False
        return True

    def solver(self) -> None:
        """
        This method tries to solve the puzzle by completing
        the consecutive empty cells with a next possible valid numbers.
        If we find an empty square with no possible digit to fill-in,
        we must backtrack to the previously filled sqaure
        and change it to next valid number.
        """
        # i : the number of the current iteration in empty
        i = 0
        # last_check : list of all last checked digits in empty
        last_check = [0] * len(self.empty)
        while i < len(self.empty):
            num = last_check[i] + 1
            # Try to find next valid number
            while num <= 9:
                if self.is_valid(self.empty[i][0], self.empty[i][1], num):
                    self.board[self.empty[i][0]][self.empty[i][1]] = num
                    break
                num += 1
                last_check[i] = num
            # If all numbers from 0 to 9 are checked,
            # in the last iteration of the loop
            # num is equal to 10
            if num == 10:
                self.board[self.empty[i][0]][self.empty[i][1]] = 0
                last_check[i] = 0
                # we did not find any number satisfying this empty space,
                # so we must go back with our iterator "i" by one
                # and set the last checked number as 0
                i -= 2
            i += 1

    def visualisation(self) -> None:
        print(colored(f"Sudoku - Level {self.level}", color = "yellow"))
        self.print_board()
        start = time.time()
        print(colored("Solved sudoku", color = "green"))
        self.solver()
        self.print_board()
        end = time.time()
        print(f"Sudoku was solved in {end - start}s")
        print()


if __name__ == "__main__":
    # Example
    board1 = Sudoku([[9, 7, 1, 0, 0, 0, 0, 3, 2],
                     [0, 4, 6, 1, 0, 0, 0, 8, 7],
                     [0, 8, 0, 0, 0, 3, 6, 1, 9],
                     [6, 3, 0, 0, 5, 7, 1, 2, 0],
                     [4, 1, 5, 6, 3, 2, 0, 0, 0],
                     [0, 0, 9, 8, 4, 1, 3, 5, 6],
                     [0, 0, 7, 3, 0, 4, 2, 0, 0],
                     [0, 0, 0, 0, 0, 5, 0, 0, 1],
                     [0, 0, 0, 0, 0, 8, 0, 7, 0]], "easy")

    board2 = Sudoku([[0, 2, 0, 9, 0, 4, 0, 1, 8],
                     [6, 0, 1, 0, 0, 7, 0, 0, 0],
                     [0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 4, 0, 8, 0, 0, 0, 0, 7],
                     [0, 0, 0, 0, 0, 0, 0, 3, 0],
                     [0, 0, 0, 1, 7, 0, 0, 0, 5],
                     [0, 0, 0, 0, 0, 0, 8, 6, 0],
                     [0, 0, 0, 7, 0, 0, 0, 0, 1],
                     [0, 0, 4, 2, 5, 1, 0, 0, 0]])

    board3 = Sudoku([[0, 0, 0, 0, 3, 0, 9, 0, 0],
                     [4, 0, 5, 0, 0, 0, 0, 0, 0],
                     [1, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 3, 0, 0, 8, 0, 0, 0, 5],
                     [0, 0, 2, 0, 0, 0, 0, 1, 0],
                     [0, 0, 0, 0, 0, 0, 0, 4, 6],
                     [0, 7, 0, 0, 0, 0, 2, 0, 0],
                     [6, 0, 0, 5, 0, 0, 0, 0, 0],
                     [0, 0, 0, 1, 0, 0, 0, 0, 0]], "hard")

    for board in board1, board2, board3:
        board.visualisation()
